x_bar + c(-1,1)*qnorm(1-alpha/2) * sd/sqrt(n)
CI.lower <- x_bar - qnorm(1-alpha/2) * sd/sqrt(n)
CI.upper <- x_bar + qnorm(1-alpha/2) * sd/sqrt(n)
data.frame(x_bar,a=CI.lower,b=CI.upper)
new.dat <- data.frame(height=70)
x_bar <- predict(fit, newdata = new.dat, level = 0.95, interval = 'confidence',type="response")
n<-length(dat$height)
alpha=0.05
sd = 0.0376
print(x_bar)
print(x_bar + c(-1,1)*qnorm(1-alpha/2) * sd/sqrt(n))
betah <- coef(dat)
betah <- coef(dat)
betah
betah <- coef(fit)
betah
cip <- confint(fit)
cip <- confint(fit)
cip
E
e
2.71828^0.2095780
cip <- confint(fit)
exp(cip)
cip <- confint(fit)
cip
exp(cip)
cip <- confint(fit)
cip
cip <- confint(fit)
cip
cip[2]
cip <- confint(fit)
typeof(cip)
cip[2]
cip <- confint(fit)
cip
cip[2]
cip <- confint(fit)
cip
cip[2:]
cip <- confint(fit)
cip
cip[2,]
cip <- confint(fit)
cip
c(cip[2,])
cip <- confint(fit)
cip
a<- c(cip[2,])
a
cip <- confint(fit)
cip
a<- c(cip[2,])
print(a)
(for i in cip[2,]){
exp(1)
exp(-40.7823+0.5336451*70)/(1+exp(-40.7823+0.5336451*70))
exp(-40.7823+0.5336451*70)/(1+exp(-40.7823+0.5336451*70))
exp(-40.7823+0.6811762*70)/(1+exp(-40.7823+0.6811762*70))
new.dat <- data.frame(height=70)
x_bar <- predict(fit, newdata = new.dat, level = 0.95, interval = 'confidence',type="response")
n<-length(dat$height)
alpha=0.05
sd = 0.0376
print(x_bar)
print(x_bar + c(-1,1)*qnorm(1-alpha/2) * sd/sqrt(n))
cip <- confint(fit)
cip
exp(-40.7823+0.5336451*70)/(1+exp(-40.7823+0.5336451*70))
exp(-40.7823+0.6811762*70)/(1+exp(-40.7823+0.6811762*70))
cip <- confint(fit)
cip
lower_bound <- exp(-40.7823+0.5336451*70)/(1+exp(-40.7823+0.5336451*70))
upper_bound <- exp(-40.7823+0.6811762*70)/(1+exp(-40.7823+0.6811762*70))
likelihood_CI <- c(lower_bound, upper_bound)
cip <- confint(fit)
cip
lower_bound <- exp(-40.7823+0.5336451*70)/(1+exp(-40.7823+0.5336451*70))
upper_bound <- exp(-40.7823+0.6811762*70)/(1+exp(-40.7823+0.6811762*70))
likelihood_CI <- c(lower_bound, upper_bound)
print(likelihood_CI)
z = 1
for (i in 1:499){
z=z+i
}
print(z)
z = 1
for (i in 1:10){
z=z+i
}
print(z)
print(z)
z = 1
for (i in 1:10){
z=z+i
print(z)
}
z = 1
for (i in 1:10){
#z=z+i
print(z)
}
z = 1
for (i in 1:10){
#z=z+i
print(i)
}
z = 1
for (i in 1:500){
z=z+i
print(i,z)
}
z = 1
for (i in 1:500){
z=z+i
print(z,i)
}
z = 1
for (i in 1:500){
z=z+i
print(i)
}
z = 1
for (i in 1:500){
z=z+i
print(i)
print(z)
}
z = 1
for (i in 1:500){
z=z+i
print(i)
print(z)
print('----------')
}
install.packages(data.table)
install.packages("data.frame)
install.packages('data.table')
install.packages('data.frame')
# load the libraries
library(oro.nifti)
library(Matrix)
library(lattice)
library(splines)
library(base)
library(pracma)
library(matrixcalc)
library(prob)
library(neurobase)
mask = readNIfTI('MNI152_T1_2mm_brain_mask_dil.nii')
mask = (mask>0)*1
n_brain_voxel = sum(mask) # 292019 within-brain voxels
dim_mask = dim(mask)
# load foci data
foci = read.table('original_foci.txt',header=F)
names(foci) = c("contrast","x","y","z")
# transform the foci from MNI152 coordinates to voxel space
origin = c(90,-126,-72)
foci$x = round((origin[1]-foci$x)/2)
foci$y = round((foci$y-origin[2])/2)
foci$z = round((foci$z-origin[3])/2)
foci = foci[-981,] # remove the strange focus in slice 111
# remove the foci if it falls outside the brain mask
n_foci = dim(foci)[1]
foci_outside = c()
for (i in 1: n_foci){
foci_coord = foci[i, 2:4]
if (mask[foci_coord[,1], foci_coord[,2], foci_coord[,3]]==0){
foci_outside <- c(foci_outside, i)
}
}
foci = foci[-foci_outside,] #dimension: (2220,4)
#pdf('final.pdf')
#for (i in 1:dim_mask[3]) {
#print(levelplot(mask[,,i],asp='iso',scales=list(x=list(draw=F),y=list(draw=F)),xlab='',ylab='',colorkey=F,at=c(-0.1,0.6,1.1),col.regions = c('white','lightgrey'),row.values=1:dim_mask[1],column.values=1:dim_mask[2],par.settings = list(axis.line = list(col = "transparent"))))
#keep = foci$z==i
#data_tmp = foci[keep,]
#trellis.focus("panel", 1, 1, highlight=FALSE)
#lpoints(data_tmp$x+runif(length(data_tmp$x),-0.5,0.5),data_tmp$y+runif(length(data_tmp$y),-0.5,0.5), pch=19, col=2, cex=0.2)
#}
#dev.off()
# remove the blank space around the brain mask
xx <- 1:dim(mask)[1]; yy <- 1:dim(mask)[2]; zz <- 1:dim(mask)[3]
x_remove <- c(); y_remove <- c(); z_remove <- c()
for (i in 1:dim(mask)[1]){
if (sum(mask[i,,])==0){
x_remove <- c(x_remove, i)
}
}
for (i in 1:dim(mask)[2]){
if (sum(mask[,i,])==0){
y_remove <- c(y_remove, i)
}
}
for (i in 1:dim(mask)[3]){
if (sum(mask[,,i])==0){
z_remove <- c(z_remove, i)
}
}
xx <- xx[-c(x_remove)] # [8,83] 76 numbers
yy <- yy[-c(y_remove)] # [9,102] 94 numbers
zz <- zz[-c(z_remove)] # [4,79] 76 numbers
# create B-spline basis for x/y/z coordinate
x_deg = 3; x_df = 8
x_knots = seq(min(xx),max(xx), by=15)
print(x_knots)
x_knots = x_knots[-length(x_knots)] # 8, 23, 38, 53, 68
print(x_knots)
X_spline = bs(xx,knots=x_knots,Boundary.knots = range(xx),degree=x_deg) #dimension: (76,8)
matplot(X_spline,type='l')
# Note the B-spline basis is a partition of unity
print(apply(X_spline,1,sum)) # row sums
# Note the B-spline basis is sparse
print(apply(X_spline,2,function(x)mean(x>0))) # column means for non-zero elements
y_deg = 3; y_df = 9;
y_knots = seq(min(yy),max(yy),by=15)
y_knots = y_knots[-length(y_knots)] # 9.0 24.5 40.0 55.5 71.0 86.5
Y_spline = bs(yy,knots=y_knots,Boundary.knots = range(yy),degree=y_deg) #dimension: (94,9)
matplot(Y_spline,type='l')
# Note the B-spline basis is a partition of unity
print(apply(Y_spline,1,sum)) # row sums
# Note the B-spline basis is sparse
print(apply(Y_spline,2,function(x)mean(x>0))) # column means for non-zero elements
z_deg = 3; z_df = 8;
z_knots = seq(min(zz),max(zz), by=15)
z_knots = z_knots[-length(z_knots)] # 4, 19, 34, 49, 64
Z_spline = bs(zz,knots=z_knots,Boundary.knots = range(zz),degree=z_deg) #dimension: (76,8)
matplot(Z_spline,type='l')
# Note the B-spline basis is a partition of unity
print(apply(Z_spline,1,sum)) # row sums
# Note the B-spline basis is sparse
print(apply(Z_spline,2,function(x)mean(x>0))) # column means for non-zero elements
image_dims <- c(dim(X_spline)[1], dim(Y_spline)[1], dim(Z_spline)[1]) # 76 94 76
image_df <- c(x_df, y_df, z_df) # 8 9 8
X = matrix(,nrow=prod(image_dims),ncol=prod(image_df)) # create an empty matrix with dimension (542944,512)
XYZ_spline <- array(0,dim=c(76,94,76))
# convert spline bases in 3 dimesion to data matrix by tensor product
colume_number = 1 #from 1st colume to 512th colume
for (bx in 1:x_df){
for (by in 1:y_df){
XY_spline <- outer(X_spline[,bx], Y_spline[,by]) # outer product: dimension (76, 94)
for (bz in 1:z_df){
for (z in 1:dim(Z_spline)[1]){
XYZ_spline[, , z] <- XY_spline*Z_spline[z,bz]
}
X[, colume_number] <- c(XYZ_spline)
colume_number <- colume_number+1
}
}
}
X <- Matrix(X, sparse = TRUE) # convert to sparse matrix; dimension" (542944, 576)
#summary(X) # 31549140 entries
#X <- as(X, "dgTMatrix")
# maybe we can use matrix Kronecker product for x/y/z spline basis?
#X_2 = kronecker(kronecker(X_spline, Y_spline), Z_spline)
#X_2 <- Matrix(X_2, sparse = TRUE)
#summary(X_2) # 31549140 entries
# Create data matrix of foci (coefficients of B-spline basis)
x_min = min(xx); x_max = max(xx); # (8,83) 76 points
y_min = min(yy); y_max = max(yy); # (9,102) 94 points
z_min = min(zz); z_max = max(zz); # (4,79) 76 points
foci$index <- (foci$x - x_min + 1) + 76*(foci$y - y_min)  + 76*94*(foci$z - z_min)
# initialize the response vector as 0
y <- rep(0, prod(image_dims)) # length: 542944
for (i in 1:dim(foci)[1]){
index = foci$index[i]
y[index] = y[index]+1 # set the foci reponse to 1
}
## remove the voxels outside brain mask
outside_brain <- c()
for (i in 1:image_dims[1]){
for (j in 1: image_dims[2]){
for (k in 1: image_dims[3]){
coord <- c(xx[i], yy[j], zz[k])
if (mask[coord[1], coord[2], coord[3]] == 0){
index <- (coord[1] - x_min + 1) + 76*(coord[2] - y_min)  + 76*94*(coord[3] - z_min)
outside_brain <- c(outside_brain, index)
}
}
}
}
X <- X[-outside_brain, ] # dimension: (292012, 576)
y <- y[-outside_brain] # length: 292019
## remove tensor product basis that have no support in the brain
no_suppport_basis <- c()
for (bx in 1:x_df){
for (by in 1:y_df){
for (bz in 1:z_df){
basis_index = bz + z_df*(by-1) + z_df*y_df*(bx-1)
basis_coef =  X[,basis_index] #length: 292019
if (max(basis_coef) <= 0.01){ # index of columns with all zero elements (computationally)
print(c(bx,by,bz))
no_suppport_basis <- c(no_suppport_basis, basis_index)
}
}
}
}
# 152 tensor product of spline basis have no support in brain mask (computationally)
X_new <- X[, -no_suppport_basis] # dimension: (292019, 424)
setwd("/Users/yifan/Documents/GitHub/Meta_regression")
# load the libraries
library(oro.nifti)
library(Matrix)
library(lattice)
library(splines)
library(base)
library(pracma)
library(matrixcalc)
library(prob)
library(neurobase)
mask = readNIfTI('MNI152_T1_2mm_brain_mask_dil.nii')
mask = (mask>0)*1
n_brain_voxel = sum(mask) # 292019 within-brain voxels
dim_mask = dim(mask)
# load foci data
foci = read.table('original_foci.txt',header=F)
names(foci) = c("contrast","x","y","z")
# transform the foci from MNI152 coordinates to voxel space
origin = c(90,-126,-72)
foci$x = round((origin[1]-foci$x)/2)
foci$y = round((foci$y-origin[2])/2)
foci$z = round((foci$z-origin[3])/2)
foci = foci[-981,] # remove the strange focus in slice 111
# remove the foci if it falls outside the brain mask
n_foci = dim(foci)[1]
foci_outside = c()
for (i in 1: n_foci){
foci_coord = foci[i, 2:4]
if (mask[foci_coord[,1], foci_coord[,2], foci_coord[,3]]==0){
foci_outside <- c(foci_outside, i)
}
}
foci = foci[-foci_outside,] #dimension: (2220,4)
#pdf('final.pdf')
#for (i in 1:dim_mask[3]) {
#print(levelplot(mask[,,i],asp='iso',scales=list(x=list(draw=F),y=list(draw=F)),xlab='',ylab='',colorkey=F,at=c(-0.1,0.6,1.1),col.regions = c('white','lightgrey'),row.values=1:dim_mask[1],column.values=1:dim_mask[2],par.settings = list(axis.line = list(col = "transparent"))))
#keep = foci$z==i
#data_tmp = foci[keep,]
#trellis.focus("panel", 1, 1, highlight=FALSE)
#lpoints(data_tmp$x+runif(length(data_tmp$x),-0.5,0.5),data_tmp$y+runif(length(data_tmp$y),-0.5,0.5), pch=19, col=2, cex=0.2)
#}
#dev.off()
# remove the blank space around the brain mask
xx <- 1:dim(mask)[1]; yy <- 1:dim(mask)[2]; zz <- 1:dim(mask)[3]
x_remove <- c(); y_remove <- c(); z_remove <- c()
for (i in 1:dim(mask)[1]){
if (sum(mask[i,,])==0){
x_remove <- c(x_remove, i)
}
}
for (i in 1:dim(mask)[2]){
if (sum(mask[,i,])==0){
y_remove <- c(y_remove, i)
}
}
for (i in 1:dim(mask)[3]){
if (sum(mask[,,i])==0){
z_remove <- c(z_remove, i)
}
}
xx <- xx[-c(x_remove)] # [8,83] 76 numbers
yy <- yy[-c(y_remove)] # [9,102] 94 numbers
zz <- zz[-c(z_remove)] # [4,79] 76 numbers
# create B-spline basis for x/y/z coordinate
x_deg = 3; x_df = 8
x_knots = seq(min(xx),max(xx), by=15)
print(x_knots)
x_knots = x_knots[-length(x_knots)] # 8, 23, 38, 53, 68
print(x_knots)
X_spline = bs(xx,knots=x_knots,Boundary.knots = range(xx),degree=x_deg) #dimension: (76,8)
matplot(X_spline,type='l')
# Note the B-spline basis is a partition of unity
print(apply(X_spline,1,sum)) # row sums
# Note the B-spline basis is sparse
print(apply(X_spline,2,function(x)mean(x>0))) # column means for non-zero elements
y_deg = 3; y_df = 9;
y_knots = seq(min(yy),max(yy),by=15)
y_knots = y_knots[-length(y_knots)] # 9.0 24.5 40.0 55.5 71.0 86.5
Y_spline = bs(yy,knots=y_knots,Boundary.knots = range(yy),degree=y_deg) #dimension: (94,9)
matplot(Y_spline,type='l')
# Note the B-spline basis is a partition of unity
print(apply(Y_spline,1,sum)) # row sums
# Note the B-spline basis is sparse
print(apply(Y_spline,2,function(x)mean(x>0))) # column means for non-zero elements
z_deg = 3; z_df = 8;
z_knots = seq(min(zz),max(zz), by=15)
z_knots = z_knots[-length(z_knots)] # 4, 19, 34, 49, 64
Z_spline = bs(zz,knots=z_knots,Boundary.knots = range(zz),degree=z_deg) #dimension: (76,8)
matplot(Z_spline,type='l')
# Note the B-spline basis is a partition of unity
print(apply(Z_spline,1,sum)) # row sums
# Note the B-spline basis is sparse
print(apply(Z_spline,2,function(x)mean(x>0))) # column means for non-zero elements
image_dims <- c(dim(X_spline)[1], dim(Y_spline)[1], dim(Z_spline)[1]) # 76 94 76
image_df <- c(x_df, y_df, z_df) # 8 9 8
X = matrix(,nrow=prod(image_dims),ncol=prod(image_df)) # create an empty matrix with dimension (542944,512)
XYZ_spline <- array(0,dim=c(76,94,76))
# convert spline bases in 3 dimesion to data matrix by tensor product
colume_number = 1 #from 1st colume to 512th colume
for (bx in 1:x_df){
for (by in 1:y_df){
XY_spline <- outer(X_spline[,bx], Y_spline[,by]) # outer product: dimension (76, 94)
for (bz in 1:z_df){
for (z in 1:dim(Z_spline)[1]){
XYZ_spline[, , z] <- XY_spline*Z_spline[z,bz]
}
X[, colume_number] <- c(XYZ_spline)
colume_number <- colume_number+1
}
}
}
X <- Matrix(X, sparse = TRUE) # convert to sparse matrix; dimension" (542944, 576)
#summary(X) # 31549140 entries
#X <- as(X, "dgTMatrix")
# maybe we can use matrix Kronecker product for x/y/z spline basis?
#X_2 = kronecker(kronecker(X_spline, Y_spline), Z_spline)
#X_2 <- Matrix(X_2, sparse = TRUE)
#summary(X_2) # 31549140 entries
# Create data matrix of foci (coefficients of B-spline basis)
x_min = min(xx); x_max = max(xx); # (8,83) 76 points
y_min = min(yy); y_max = max(yy); # (9,102) 94 points
z_min = min(zz); z_max = max(zz); # (4,79) 76 points
foci$index <- (foci$x - x_min + 1) + 76*(foci$y - y_min)  + 76*94*(foci$z - z_min)
# initialize the response vector as 0
y <- rep(0, prod(image_dims)) # length: 542944
for (i in 1:dim(foci)[1]){
index = foci$index[i]
y[index] = y[index]+1 # set the foci reponse to 1
}
## remove the voxels outside brain mask
outside_brain <- c()
for (i in 1:image_dims[1]){
for (j in 1: image_dims[2]){
for (k in 1: image_dims[3]){
coord <- c(xx[i], yy[j], zz[k])
if (mask[coord[1], coord[2], coord[3]] == 0){
index <- (coord[1] - x_min + 1) + 76*(coord[2] - y_min)  + 76*94*(coord[3] - z_min)
outside_brain <- c(outside_brain, index)
}
}
}
}
X <- X[-outside_brain, ] # dimension: (292012, 576)
y <- y[-outside_brain] # length: 292019
## remove tensor product basis that have no support in the brain
no_suppport_basis <- c()
for (bx in 1:x_df){
for (by in 1:y_df){
for (bz in 1:z_df){
basis_index = bz + z_df*(by-1) + z_df*y_df*(bx-1)
basis_coef =  X[,basis_index] #length: 292019
if (max(basis_coef) <= 0.01){ # index of columns with all zero elements (computationally)
print(c(bx,by,bz))
no_suppport_basis <- c(no_suppport_basis, basis_index)
}
}
}
}
# 152 tensor product of spline basis have no support in brain mask (computationally)
X_new <- X[, -no_suppport_basis] # dimension: (292019, 424)
dim(X_new)
# IRLS for Poisson regression
beta_i = log(sum(y)/dim(X_new)[1])
beta <- rep(beta_i, dim(X_new)[2])
# sum_i (log(y_i!))
sum_logy_factorial = sum(log(factorial(y)))
#kappa = 0.01
for (k in 1:24){
g_mu <- as.vector(X_new %*% beta) # g_mu: linear predictor
mu <- exp(g_mu) # mu: mean vector (log link)
mu_sqrt <- sqrt(mu)
# compute the log-likelihood in the current iteration
# l(beta) = sum(y_i*log(mu_i)-mu_i-log(y_i!))
log_mu <- log(mu)
y_log_mu <- y*log_mu
l_beta <- sum(y_log_mu) - sum(mu) - sum_logy_factorial
# compute the update
X_star <- X_new*mu_sqrt # X* = W^(1/2) X
#cat(rankMatrix(X_new, method='qr'), kappa(X_star), "\n")
XWX <- crossprod(X_star)#t(X_star) %*% X_star # XWX = (W^(1/2) X)^T (W^(1/2) X)
#cat(l_beta, rankMatrix(XWX, method='qr'), det(XWX), "\n")
cat(kappa(X_star), l_beta, "\n")
XWX_inverse <- qr.solve(XWX)
update <- XWX_inverse %*% t(X_new) %*% (y-mu)
beta <- beta + update
}
# IRLS for Poisson regression
beta_i = log(sum(y)/dim(X_new)[1])
beta <- rep(beta_i, dim(X_new)[2])
# sum_i (log(y_i!))
sum_logy_factorial = sum(log(factorial(y)))
#kappa = 0.01
for (k in 1:24){
g_mu <- as.vector(X_new %*% beta) # g_mu: linear predictor
mu <- exp(g_mu) # mu: mean vector (log link)
mu_sqrt <- sqrt(mu)
# compute the log-likelihood in the current iteration
# l(beta) = sum(y_i*log(mu_i)-mu_i-log(y_i!))
log_mu <- log(mu)
y_log_mu <- y*log_mu
l_beta <- sum(y_log_mu) - sum(mu) - sum_logy_factorial
# compute the update
X_star <- X_new*mu_sqrt # X* = W^(1/2) X
#cat(rankMatrix(X_new, method='qr'), kappa(X_star), "\n")
XWX <- crossprod(X_star)#t(X_star) %*% X_star # XWX = (W^(1/2) X)^T (W^(1/2) X)
#cat(l_beta, rankMatrix(XWX, method='qr'), det(XWX), "\n")
cat(kappa(X_star), l_beta, "\n")
XWX_inverse <- solve(XWX)
update <- XWX_inverse %*% t(X_new) %*% (y-mu)
beta <- beta + update
}
